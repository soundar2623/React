"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHistoryWithBasename = exports.createHistory = void 0;
/**
 * createApp at server
 */
var create_history_1 = require("create-history");
var createMatcher_1 = __importDefault(require("../share/createMatcher"));
var defaultSettings_1 = __importDefault(require("./defaultSettings"));
var createController_1 = __importDefault(require("./createController"));
var util_1 = require("../share/util");
function createHistory(settings) {
    var finalContext = Object.assign({}, defaultSettings_1.default.context, settings === null || settings === void 0 ? void 0 : settings.context);
    var finalAppSettings = Object.assign({}, defaultSettings_1.default, settings, { context: finalContext });
    var chInit = create_history_1.createMemoryHistory;
    return create_history_1.useQueries(chInit)(finalAppSettings);
}
exports.createHistory = createHistory;
function createHistoryWithBasename(settings) {
    var finalContext = Object.assign({}, defaultSettings_1.default.context, settings === null || settings === void 0 ? void 0 : settings.context);
    var finalAppSettings = Object.assign({}, defaultSettings_1.default, settings, { context: finalContext });
    var chInit = create_history_1.createMemoryHistory;
    return create_history_1.useQueries(create_history_1.useBasename(chInit))(finalAppSettings);
}
exports.createHistoryWithBasename = createHistoryWithBasename;
function createApp(settings) {
    var finalContext = Object.assign({}, defaultSettings_1.default.context, settings.context);
    var finalAppSettings = Object.assign({}, defaultSettings_1.default, settings, { context: finalContext });
    var routes = finalAppSettings.routes, viewEngine = finalAppSettings.viewEngine, loader = finalAppSettings.loader, context = finalAppSettings.context;
    var matcher = createMatcher_1.default(routes || []);
    var history = finalAppSettings.basename
        ? createHistoryWithBasename(finalAppSettings)
        : createHistory(finalAppSettings);
    function render(requestPath, injectContext, callback) {
        var result = null;
        if (typeof injectContext === 'function') {
            callback = injectContext;
            injectContext = null;
        }
        try {
            var controller = fetchController(requestPath, injectContext);
            if (util_1.isPromise(controller)) {
                result = controller.then(initController);
            }
            else {
                result = initController(controller);
            }
        }
        catch (error) {
            callback && callback(error);
            return Promise.reject(error);
        }
        if (util_1.isPromise(result)) {
            if (callback) {
                var cb_1 = callback;
                result.then(function (result) { return cb_1(null, result); }, function (reason) { return cb_1(reason); });
            }
            return result;
        }
        callback && callback(null, result);
        return result;
    }
    function initController(controller) {
        var component = controller.init();
        if (component === null) {
            return { controller: controller };
        }
        if (util_1.isPromise(component)) {
            return component.then(function (component) {
                if (component == null) {
                    return { controller: controller };
                }
                return {
                    content: renderToString(component, controller),
                    controller: controller
                };
            });
        }
        return {
            content: renderToString(component, controller),
            controller: controller
        };
    }
    function fetchController(requestPath, injectContext) {
        var location = history.createLocation(requestPath);
        var matches = matcher(location.pathname);
        if (!matches) {
            var error = new util_1.ReqError("Did not match any route with path:" + requestPath, 404);
            return Promise.reject(error);
        }
        var path = matches.path, params = matches.params, controller = matches.controller;
        var finalLocation = Object.assign({
            pattern: path,
            params: params,
            raw: location.pathname + location.search,
            basename: ''
        }, location);
        var finalContext = __assign(__assign({}, context), injectContext);
        var iController = loader(controller, finalLocation, finalContext);
        if (util_1.isPromise(iController)) {
            return (iController
                .then(function (iController) {
                var Wrapper = wrapController(iController);
                return createController_1.default(Wrapper, finalLocation, finalContext);
            }));
        }
        var Wrapper = wrapController(iController);
        return createController_1.default(Wrapper, finalLocation, finalContext);
    }
    var controllers = util_1.createMap();
    function wrapController(iController) {
        if (controllers.has(iController)) {
            return controllers.get(iController);
        }
        // implement the controller's life-cycle and useful methods
        var WrapperController = /** @class */ (function (_super) {
            __extends(WrapperController, _super);
            function WrapperController(location, context) {
                var _this = _super.call(this, location, context) || this;
                _this.location = location;
                _this.context = context;
                _this.matcher = matcher;
                _this.loader = loader;
                _this.routes = routes || [];
                return _this;
            }
            return WrapperController;
        }(iController));
        controllers.set(iController, WrapperController);
        return WrapperController;
    }
    function renderToString(element, controller) {
        if (!viewEngine) {
            return null;
        }
        if (controller) {
            return viewEngine.render(element, controller);
        }
        else {
            return viewEngine.render(element);
        }
    }
    return {
        render: render,
        history: history,
    };
}
exports.default = createApp;
