"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPromise = exports.createMap = exports.createCache = exports.ReqError = void 0;
var ReqError = /** @class */ (function (_super) {
    __extends(ReqError, _super);
    function ReqError(message, status) {
        var _this = _super.call(this, message) || this;
        _this.status = status;
        return _this;
    }
    return ReqError;
}(Error));
exports.ReqError = ReqError;
function createCache(amount) {
    if (amount === void 0) { amount = 10; }
    var cache = {};
    function keys() {
        return Object.keys(cache);
    }
    function checkAmount() {
        var cacheKeys = keys();
        if (cacheKeys.length > amount) {
            remove(cacheKeys[0]);
        }
    }
    function set(key, value) {
        remove(key);
        cache[key] = value;
        checkAmount();
    }
    function get(key) {
        return cache[key];
    }
    function remove(key) {
        if (cache.hasOwnProperty(key)) {
            delete cache[key];
        }
    }
    function getAll() {
        return cache;
    }
    return { keys: keys, get: get, set: set, remove: remove, getAll: getAll };
}
exports.createCache = createCache;
function createMap() {
    var list = [];
    function find(key) {
        return list.filter(function (item) { return item.key === key; });
    }
    function has(key) {
        var result = find(key);
        return result.length > 0;
    }
    function get(key) {
        var result = find(key);
        return result.length ? result[0].value : void 0;
    }
    function set(key, value) {
        var result = find(key);
        if (result.length === 0) {
            var item = { key: key, value: value };
            list.push(item);
        }
        else {
            result[0].value = value;
        }
    }
    function remove(key) {
        list = list.filter(function (item) { return item.key !== key; });
    }
    return { get: get, set: set, has: has, remove: remove };
}
exports.createMap = createMap;
function isPromise(value) {
    return !!value && typeof value.then === 'function';
}
exports.isPromise = isPromise;
