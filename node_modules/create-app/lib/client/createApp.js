"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHistoryWithBasename = exports.createHistory = void 0;
var create_history_1 = __importStar(require("create-history"));
var createMatcher_1 = __importDefault(require("../share/createMatcher"));
var defaultSettings_1 = __importDefault(require("./defaultSettings"));
var createController_1 = __importDefault(require("./createController"));
var util_1 = require("../share/util");
function createHistory(settings) {
    var finalContext = Object.assign({}, defaultSettings_1.default.context, settings === null || settings === void 0 ? void 0 : settings.context);
    var finalAppSettings = Object.assign({}, defaultSettings_1.default, settings, { context: finalContext });
    var chInit = create_history_1.default[finalAppSettings.type];
    return create_history_1.useBeforeUnload(create_history_1.useQueries(chInit))(finalAppSettings);
}
exports.createHistory = createHistory;
function createHistoryWithBasename(settings) {
    var finalContext = Object.assign({}, defaultSettings_1.default.context, settings === null || settings === void 0 ? void 0 : settings.context);
    var finalAppSettings = Object.assign({}, defaultSettings_1.default, settings, { context: finalContext });
    var chInit = create_history_1.default[finalAppSettings.type];
    return create_history_1.useBeforeUnload(create_history_1.useQueries(create_history_1.useBasename(chInit)))(finalAppSettings);
}
exports.createHistoryWithBasename = createHistoryWithBasename;
function createApp(settings) {
    var finalContext = Object.assign({}, defaultSettings_1.default.context, settings === null || settings === void 0 ? void 0 : settings.context);
    var finalAppSettings = Object.assign({}, defaultSettings_1.default, settings, { context: finalContext });
    var routes = finalAppSettings.routes, viewEngine = finalAppSettings.viewEngine, loader = finalAppSettings.loader, context = finalAppSettings.context, container = finalAppSettings.container, cacheAmount = finalAppSettings.cacheAmount;
    var history = finalAppSettings.basename
        ? createHistoryWithBasename(finalAppSettings)
        : createHistory(finalAppSettings);
    var matcher = createMatcher_1.default(routes || []);
    var currentController = null;
    var currentLocation = null;
    var unlisten = null;
    var finalContainer = null;
    var cache = util_1.createCache(cacheAmount);
    function saveControllerToCache(controller) {
        cache.set(controller.location.raw, controller);
    }
    function getControllerFromCache(location) {
        return cache.get(location.raw);
    }
    function removeControllerFromCache(controller) {
        cache.remove(controller.location.raw);
    }
    function getContainer() {
        if (finalContainer) {
            return finalContainer;
        }
        if (typeof container === 'string') {
            return finalContainer = document.querySelector(container);
        }
        else {
            return finalContainer = container;
        }
    }
    function render(targetPath) {
        var location = typeof targetPath === 'string'
            ? history.createLocation(targetPath)
            : targetPath;
        context.prevLocation = currentLocation;
        var matches = matcher(location.pathname);
        if (!matches) {
            throw new util_1.ReqError("Did not match any route with pathname:" + location.pathname, 404);
        }
        var path = matches.path, params = matches.params, controller = matches.controller;
        var finalLocation = Object.assign({
            pattern: path,
            params: params,
            raw: location.pathname + location.search,
            basename: ''
        }, location);
        currentLocation = finalLocation;
        var initController = createInitController(finalLocation);
        var iController = loader(controller, finalLocation, context);
        if (util_1.isPromise(iController)) {
            return (iController
                .then(initController));
        }
        else {
            return initController(iController);
        }
    }
    var controllers = util_1.createMap();
    function wrapController(IController) {
        if (controllers.has(IController)) {
            return controllers.get(IController);
        }
        // implement the controller's life-cycle and useful methods
        var WrapperController = /** @class */ (function (_super) {
            __extends(WrapperController, _super);
            function WrapperController(location, context) {
                var _this = _super.call(this, location, context) || this;
                _this.location = location;
                _this.context = context;
                _this.history = history;
                _this.matcher = matcher;
                _this.loader = loader;
                _this.routes = routes || [];
                return _this;
            }
            // update view
            WrapperController.prototype.refreshView = function (view) {
                if (view === void 0) { view = this.render(); }
                renderToContainer(view, this);
            };
            // get container node
            WrapperController.prototype.getContainer = function () {
                return getContainer();
            };
            // clear container
            WrapperController.prototype.clearContainer = function () {
                clearContainer();
            };
            WrapperController.prototype.saveToCache = function () {
                this.KeepAlive = true;
                saveControllerToCache(this);
            };
            WrapperController.prototype.removeFromCache = function () {
                this.KeepAlive = false;
                removeControllerFromCache(this);
            };
            WrapperController.prototype.getAllCache = function () {
                return cache.getAll();
            };
            return WrapperController;
        }(IController));
        controllers.set(IController, WrapperController);
        return WrapperController;
    }
    function createInitController(location) {
        function initController(iController) {
            if (currentLocation !== location) {
                return;
            }
            destroyController();
            var controller = currentController = getControllerFromCache(location);
            var element = null;
            if (!!controller) {
                if (controller.restore) {
                    element = controller.restore(location, context);
                }
                else {
                    element = controller.init();
                }
                controller.location = location;
                controller.context = context;
            }
            else {
                var FinalController = wrapController(iController);
                controller = currentController =
                    createController_1.default(FinalController, location, context);
                element = controller.init();
            }
            // if controller#init|restore return false value, do nothing
            if (element == null) {
                return null;
            }
            if (util_1.isPromise(element)) {
                return element.then(function (result) {
                    if (currentLocation !== location || result == null) {
                        return null;
                    }
                    return renderToContainer(result, controller);
                });
            }
            return renderToContainer(element, controller);
        }
        return initController;
    }
    function renderToContainer(element, controller) {
        if (controller) {
            saveControllerToCache(controller);
        }
        if (!viewEngine) {
            return null;
        }
        return viewEngine.render(element, controller, getContainer());
    }
    function clearContainer() {
        if (viewEngine && viewEngine.clear) {
            var container_1 = getContainer();
            if (container_1) {
                return viewEngine.clear(container_1);
            }
        }
    }
    function destroyController() {
        if (currentController && !currentController.KeepAlive) {
            removeControllerFromCache(currentController);
        }
        if (currentController && currentController.destroy) {
            currentController.destroy();
            currentController = null;
        }
    }
    var listeners = [];
    function subscribe(listener) {
        var index = listeners.indexOf(listener);
        if (index === -1) {
            listeners.push(listener);
        }
        return function () {
            var index = listeners.indexOf(listener);
            if (index !== -1) {
                listeners = listeners.filter(function (fn) { return fn !== listener; });
            }
        };
    }
    function publish(location) {
        for (var i = 0, len = listeners.length; i < len; i++) {
            listeners[i](location, history);
        }
    }
    function start(callback, shouldRenderWithCurrentLocation) {
        if (typeof callback === 'boolean') {
            shouldRenderWithCurrentLocation = callback;
            callback = void 0;
        }
        var listener = function (location) {
            var result = render(location);
            if (util_1.isPromise(result)) {
                result.then(function () {
                    publish(location);
                });
            }
            else {
                publish(location);
            }
        };
        unlisten = history.listen(listener);
        var unsubscribe = null;
        if (typeof callback === 'function') {
            unsubscribe = subscribe(callback);
        }
        if (shouldRenderWithCurrentLocation !== false) {
            listener(history.getCurrentLocation());
        }
        return unsubscribe;
    }
    function stop() {
        if (unlisten) {
            unlisten();
            destroyController();
            currentController = null;
            currentLocation = null;
            unlisten = null;
            finalContainer = null;
            listeners = [];
        }
    }
    return {
        start: start,
        stop: stop,
        render: render,
        history: history,
        subscribe: subscribe,
    };
}
exports.default = createApp;
