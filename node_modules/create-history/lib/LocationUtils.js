"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.locationsAreEqual = exports.statesAreEqual = exports.defaultGetUserConfirmation = exports.createLocation = exports.createQuery = void 0;
var tiny_invariant_1 = __importDefault(require("tiny-invariant"));
var PathUtils_1 = require("./PathUtils");
var Actions_1 = require("./Actions");
function createQuery(props) {
    return Object.assign(Object.create(null), props);
}
exports.createQuery = createQuery;
function createLocation(input, action, key) {
    if (input === void 0) { input = '/'; }
    if (action === void 0) { action = Actions_1.POP; }
    if (key === void 0) { key = ''; }
    var location = typeof input === 'string'
        ? PathUtils_1.parsePath(input)
        : input;
    var pathname = location.pathname || '/';
    var search = location.search || '';
    var hash = location.hash || '';
    var state = location.state;
    try {
        pathname = decodeURI(pathname);
    }
    catch (e) {
        if (e instanceof URIError) {
            throw new URIError('Pathname "' +
                location.pathname +
                '" could not be decoded. ' +
                'This is likely caused by an invalid percent-encoding.');
        }
        else {
            throw e;
        }
    }
    return {
        pathname: pathname,
        search: search,
        hash: hash,
        state: state,
        action: action,
        key: key
    };
}
exports.createLocation = createLocation;
function defaultGetUserConfirmation(message, callback) {
    callback(window.confirm(message));
}
exports.defaultGetUserConfirmation = defaultGetUserConfirmation;
function isDate(object) {
    return Object.prototype.toString.call(object) === '[object Date]';
}
function getKeys(o) {
    return Object.keys(o);
}
function statesAreEqual(a, b) {
    if (a === b)
        return true;
    if (typeof a !== typeof b)
        return false;
    tiny_invariant_1.default(typeof a !== 'function', 'You must not store functions in location state');
    // Not the same object, but same type.
    if (typeof a === 'object' && typeof b === 'object') {
        if (a === null || b === null) {
            return false;
        }
        else {
            tiny_invariant_1.default(!(isDate(a) && isDate(b)), 'You must not store Date objects in location state');
            if (!Array.isArray(a)) {
                var keysofA = getKeys(a);
                var keysofB = getKeys(b);
                return (keysofA.length === keysofB.length &&
                    keysofA.every(function (key) { return statesAreEqual(a[key], b[key]); }));
            }
            return (Array.isArray(b) &&
                a.length === b.length &&
                a.every(function (item, index) { return statesAreEqual(item, b[index]); }));
        }
    }
    // All other serializable types (string, number, boolean)
    // should be strict equal.
    return false;
}
exports.statesAreEqual = statesAreEqual;
function locationsAreEqual(a, b) {
    return (a.key === b.key && // Different key !== location change.
        a.pathname === b.pathname &&
        a.search === b.search &&
        a.hash === b.hash &&
        statesAreEqual(a.state, b.state));
}
exports.locationsAreEqual = locationsAreEqual;
