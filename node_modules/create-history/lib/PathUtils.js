"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPath = exports.parsePath = exports.getQueryStringValueFromPath = exports.stripQueryStringValueFromPath = exports.addQueryStringValueToPath = void 0;
var tiny_warning_1 = __importDefault(require("tiny-warning"));
function addQueryStringValueToPath(path, key, value) {
    var _a = parsePath(path), pathname = _a.pathname, search = _a.search, hash = _a.hash;
    return createPath({
        pathname: pathname,
        search: search +
            (search && search.indexOf('?') !== -1 ? '&' : '?') +
            key +
            '=' +
            value,
        hash: hash
    });
}
exports.addQueryStringValueToPath = addQueryStringValueToPath;
function stripQueryStringValueFromPath(path, key) {
    var _a = parsePath(path), pathname = _a.pathname, search = _a.search, hash = _a.hash;
    return createPath({
        pathname: pathname,
        search: search ? search.replace(new RegExp("([?&])" + key + "=[a-zA-Z0-9]+(&?)"), function (match, prefix, suffix) { return (prefix === '?' ? prefix : suffix); }) : '',
        hash: hash
    });
}
exports.stripQueryStringValueFromPath = stripQueryStringValueFromPath;
function getQueryStringValueFromPath(path, key) {
    var search = parsePath(path).search;
    var match = search
        ? search.match(new RegExp("[?&]" + key + "=([a-zA-Z0-9]+)"))
        : null;
    return match ? match[1] : '';
}
exports.getQueryStringValueFromPath = getQueryStringValueFromPath;
function extractPath(path) {
    var match = null;
    if (typeof path === 'string') {
        match = path.match(/^(https?:)?\/\/[^\/]*/);
    }
    return match == null ? path : path.substring(match[0].length);
}
function parsePath(path) {
    var pathname = extractPath(path);
    var search = '';
    var hash = '';
    tiny_warning_1.default(path === pathname, "A path must be pathname + search + hash only, not a full URL like " + path);
    var hashIndex = -1;
    if (typeof pathname === 'string') {
        hashIndex = pathname.indexOf('#');
    }
    if (hashIndex !== -1) {
        hash = pathname.substring(hashIndex);
        pathname = pathname.substring(0, hashIndex);
    }
    var searchIndex = -1;
    if (typeof pathname === 'string') {
        searchIndex = pathname.indexOf('?');
    }
    if (searchIndex !== -1) {
        search = pathname.substring(searchIndex);
        pathname = pathname.substring(0, searchIndex);
    }
    if (pathname === '')
        pathname = '/';
    return {
        pathname: pathname,
        search: search,
        hash: hash
    };
}
exports.parsePath = parsePath;
function createPath(location) {
    if (typeof location === 'string') {
        return location;
    }
    location = location || {};
    var basename = location.basename, pathname = location.pathname, search = location.search, hash = location.hash;
    var path = (basename || '') + pathname;
    if (search && search !== '?')
        path += search;
    if (hash)
        path += hash;
    return path;
}
exports.createPath = createPath;
