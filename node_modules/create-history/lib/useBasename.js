"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var tiny_warning_1 = __importDefault(require("tiny-warning"));
var PathUtils_1 = require("./PathUtils");
function useBasename(createHistory) {
    function ch(options) {
        if (options === void 0) { options = { hashType: 'slash' }; }
        var history = createHistory(options);
        var basename = options.basename;
        function addBasename(location) {
            if (!location)
                return location;
            if (basename && !location.basename) {
                if (location.pathname.indexOf(basename) === 0) {
                    location.pathname = location.pathname.substring(basename.length);
                    location.basename = basename;
                    if (location.pathname === '')
                        location.pathname = '/';
                }
                else {
                    location.basename = '';
                }
            }
            return location;
        }
        function prependBasename(location) {
            if (location === void 0) { location = '/'; }
            if (!basename)
                return location;
            var object = typeof location === 'string'
                ? PathUtils_1.parsePath(location)
                : location;
            var pname = object.pathname || basename;
            var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + "/";
            var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
            var pathname = normalizedBasename + normalizedPathname;
            return __assign(__assign({}, object), { pathname: pathname });
        }
        // Override all read methods with basename-aware versions.
        function getCurrentLocation() {
            return addBasename(history.getCurrentLocation());
        }
        function runTransitionHook(hook, location, callback) {
            var result = hook(location, callback);
            if (hook.length < 2) {
                // Assume the hook runs synchronously and automatically
                // call the callback with the return value.
                callback && callback(result);
            }
            else {
                tiny_warning_1.default(result === void 0, 'You should not "return" in a transition hook with a callback argument; ' +
                    'call the callback instead');
            }
        }
        function listenBefore(hook) {
            return history.listenBefore(function (location, callback) {
                return runTransitionHook(hook, addBasename(location), callback);
            });
        }
        function listen(hook) {
            return history.listen(function (location) { return hook(addBasename(location)); });
        }
        // Override all write methods with basename-aware versions.
        function push(location, silence) {
            if (silence === void 0) { silence = false; }
            history.push(prependBasename(location), silence);
        }
        function replace(location, silence) {
            if (silence === void 0) { silence = false; }
            history.replace(prependBasename(location), silence);
        }
        function createPath(location) {
            return history.createPath(prependBasename(location));
        }
        function createHref(location) {
            return history.createHref(prependBasename(location));
        }
        function createLocation(input, action, key) {
            return addBasename(history.createLocation(prependBasename(input), action, key));
        }
        return __assign(__assign({}, history), { getCurrentLocation: getCurrentLocation,
            listenBefore: listenBefore,
            listen: listen,
            push: push,
            replace: replace,
            createPath: createPath,
            createHref: createHref,
            createLocation: createLocation });
    }
    return ch;
}
exports.default = useBasename;
