"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var tiny_warning_1 = __importDefault(require("tiny-warning"));
var querystring_1 = require("querystring");
var LocationUtils_1 = require("./LocationUtils");
var PathUtils_1 = require("./PathUtils");
function defaultStringifyQuery(query) {
    return querystring_1.stringify(query).replace(/%20/g, '+');
}
/**
 * Returns a new createHistory function that may be used to create
 * history objects that know how to handle URL queries.
 */
function useQueries(createHistory) {
    function ch(options) {
        if (options === void 0) { options = { hashType: 'slash' }; }
        var history = createHistory(options);
        var _a = options.stringifyQuery, stringifyQuery = _a === void 0 ? defaultStringifyQuery : _a, _b = options.parseQueryString, parseQueryString = _b === void 0 ? querystring_1.parse : _b;
        if (!stringifyQuery || typeof stringifyQuery !== 'function')
            stringifyQuery = defaultStringifyQuery;
        if (!parseQueryString || typeof parseQueryString !== 'function')
            parseQueryString = querystring_1.parse;
        function decodeQuery(location) {
            if (!location)
                return location;
            if (location.query === null || location.query === void 0)
                location.query = parseQueryString(location.search ? location.search.substring(1) : '');
            return location;
        }
        function encodeQuery(location, query) {
            if (!query)
                return location;
            var object = typeof location === 'string' ? PathUtils_1.parsePath(location) : location;
            var queryString = stringifyQuery(query);
            var search = queryString ? "?" + queryString : '';
            return __assign(__assign({}, object), { search: search });
        }
        function runTransitionHook(hook, location, callback) {
            var result = hook(location, callback);
            if (hook.length < 2) {
                // Assume the hook runs synchronously and automatically
                // call the callback with the return value.
                callback && callback(result);
            }
            else {
                tiny_warning_1.default(result === void 0, 'You should not "return" in a transition hook with a callback argument; ' +
                    'call the callback instead');
            }
        }
        // Override all read methods with query-aware versions.
        function getCurrentLocation() {
            return decodeQuery(history.getCurrentLocation());
        }
        function listenBefore(hook) {
            return history.listenBefore(function (location, callback) {
                return runTransitionHook(hook, decodeQuery(location), callback);
            });
        }
        function listen(hook) {
            return history.listen(function (location) { return hook(decodeQuery(location)); });
        }
        // Override all write methods with query-aware versions.
        function push(location, silence) {
            if (silence === void 0) { silence = false; }
            history.push(encodeQuery(location, typeof location === 'string' ? void 0 : location.query), silence);
        }
        function replace(location, silence) {
            if (silence === void 0) { silence = false; }
            history.replace(encodeQuery(location, typeof location === 'string' ? void 0 : location.query), silence);
        }
        function createPath(location) {
            return history.createPath(encodeQuery(location, typeof location === 'string' ? void 0 : location.query));
        }
        function createHref(location) {
            return history.createHref(encodeQuery(location, typeof location === 'string' ? void 0 : location.query));
        }
        function createLocation(location, action, key) {
            if (location === void 0) { location = '/'; }
            var newLocation = encodeQuery(location, typeof location === 'string' ? void 0 : location.query);
            var newLocationAfter = history.createLocation(newLocation, action, key);
            if (typeof location !== 'string' && location.query)
                newLocationAfter.query = LocationUtils_1.createQuery(location.query);
            return decodeQuery(newLocationAfter);
        }
        return __assign(__assign({}, history), { getCurrentLocation: getCurrentLocation,
            listenBefore: listenBefore,
            listen: listen,
            push: push,
            replace: replace,
            createPath: createPath,
            createHref: createHref,
            createLocation: createLocation });
    }
    return ch;
}
exports.default = useQueries;
