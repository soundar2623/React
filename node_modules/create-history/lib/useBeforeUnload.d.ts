import type { Hook } from './runTransitionHook';
import type { CreateHistory, History, HistoryOptions, LTFromCH, LocationTypeMap, BaseLocation, Location, Unlisten, LocationType } from './index';
export interface ListenBeforeUnload<IL extends Location = Location> {
    (hook: Hook<IL>): Unlisten;
}
export interface HistoryWithBFOL<BL extends BaseLocation = BaseLocation, IL extends Location = Location> extends History<BL, IL> {
    listenBeforeUnload: ListenBeforeUnload<IL>;
}
export interface CreateHistoryWithBFOL<LT extends LocationType> {
    (options?: HistoryOptions): HistoryWithBFOL<LocationTypeMap[LT]['Base'], LocationTypeMap[LT]['Intact']>;
}
export interface GetPromptMessage {
    (): unknown;
}
export interface StopListener {
    (): void;
}
/**
 * Returns a new createHistory function that can be used to create
 * history objects that know how to use the beforeunload event in web
 * browsers to cancel navigation.
 */
export default function useBeforeUnload<CH extends CreateHistory<any>>(createHistory: CH): CreateHistoryWithBFOL<LTFromCH<CH>>;
