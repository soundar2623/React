"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readState = exports.saveState = exports.appendPrefix = void 0;
var tiny_warning_1 = __importDefault(require("tiny-warning"));
var QuotaExceededErrors = [
    'QuotaExceededError',
    'QUOTA_EXCEEDED_ERR'
];
var SecurityErrors = [
    'SecurityError'
];
var KeyPrefix = '@@History/';
function appendPrefix(key) {
    return KeyPrefix + key;
}
exports.appendPrefix = appendPrefix;
function saveState(key, state) {
    if (!window.sessionStorage) {
        tiny_warning_1.default(false, '[history] Unable to save state; sessionStorage is not available');
        return;
    }
    try {
        if (state === null) {
            window.sessionStorage.removeItem(appendPrefix(key));
        }
        else {
            window.sessionStorage.setItem(appendPrefix(key), JSON.stringify(state));
        }
    }
    catch (ex) {
        var error = ex;
        if (SecurityErrors.includes(error.name)) {
            // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
            // attempt to access window.sessionStorage.
            tiny_warning_1.default(false, '[history] Unable to save state; sessionStorage is not available due to security settings');
            return;
        }
        if (QuotaExceededErrors.includes(error.name)
            && window.sessionStorage.length === 0) {
            // Safari "private mode" throws QuotaExceededError.
            tiny_warning_1.default(false, '[history] Unable to save state; sessionStorage is not available in Safari private mode');
            return;
        }
        throw error;
    }
}
exports.saveState = saveState;
function readState(key) {
    var json = null;
    try {
        json = window.sessionStorage.getItem(appendPrefix(key));
    }
    catch (ex) {
        var error = ex;
        if (SecurityErrors.includes(error.name)) {
            // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
            // attempt to access window.sessionStorage.
            tiny_warning_1.default(false, '[history] Unable to read state; sessionStorage is not available due to security settings');
            return void 0;
        }
    }
    if (json) {
        try {
            return JSON.parse(json);
        }
        catch (err) {
            var error = err;
            // Ignore invalid JSON.
        }
    }
    return void 0;
}
exports.readState = readState;
