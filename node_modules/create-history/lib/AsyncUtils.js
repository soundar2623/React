"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loopAsync = void 0;
function loopAsync(turns, work, callback) {
    var currentTurn = 0;
    var isDone = false;
    var isSync = false;
    var hasNext = false;
    var doneArgs = [];
    function done() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        isDone = true;
        if (isSync) {
            // Iterate instead of recursing if possible.
            doneArgs = args;
            return;
        }
        callback.apply(void 0, __spread(args));
    }
    function next() {
        if (isDone)
            return;
        hasNext = true;
        if (isSync)
            return; // Iterate instead of recursing if possible.
        isSync = true;
        while (!isDone && currentTurn < turns && hasNext) {
            hasNext = false;
            work(currentTurn++, next, done);
        }
        isSync = false;
        if (isDone) {
            // This means the loop finished synchronously.
            callback.apply(void 0, __spread(doneArgs));
            return;
        }
        if (currentTurn >= turns && hasNext) {
            isDone = true;
            callback();
        }
    }
    next();
}
exports.loopAsync = loopAsync;
